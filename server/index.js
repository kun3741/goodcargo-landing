import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';
import mongoose from 'mongoose';
import connectDB from './config/db.js';
import contentRoutes from './routes/content.js';
import authRoutes from './routes/auth.js';
import telegramRoutes from './routes/telegram.js';
import { authMiddleware } from './middleware/auth.js';

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è .env —Ñ–∞–π–ª—É (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ—ó —Ä–æ–∑—Ä–æ–±–∫–∏)
// –ù–∞ Render ENV –∑–º—ñ–Ω–Ω—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—é—Ç—å—Å—è —á–µ—Ä–µ–∑ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
if (process.env.NODE_ENV !== 'production') {
  dotenv.config();
}

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const PORT = process.env.PORT || 5000;

// –õ–æ–≥—É–≤–∞–Ω–Ω—è ENV –∑–º—ñ–Ω–Ω–∏—Ö –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (–±–µ–∑ —Å–µ–∫—Ä–µ—Ç—ñ–≤)
console.log('=== Server Configuration ===');
console.log('NODE_ENV:', process.env.NODE_ENV);
console.log('PORT:', PORT);
console.log('MONGODB_URI exists:', !!process.env.MONGODB_URI);
console.log('JWT_SECRET exists:', !!process.env.JWT_SECRET);
console.log('ADMIN_PASSWORD exists:', !!process.env.ADMIN_PASSWORD);
console.log('===========================');

// CORS –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
const corsOptions = {
  origin: function (origin, callback) {
    // –ù–∞ Render –≤ production —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —ñ –±–µ–∫–µ–Ω–¥ –Ω–∞ –æ–¥–Ω–æ–º—É –¥–æ–º–µ–Ω—ñ
    // –î–æ–∑–≤–æ–ª—è—î–º–æ –∑–∞–ø–∏—Ç–∏ –±–µ–∑ origin –∞–±–æ –∑ —Ç–æ–≥–æ –∂ –¥–æ–º–µ–Ω—É
    if (!origin) return callback(null, true);
    
    // –í —Ä–µ–∂–∏–º—ñ —Ä–æ–∑—Ä–æ–±–∫–∏ –¥–æ–∑–≤–æ–ª—è—î–º–æ localhost origins
    if (process.env.NODE_ENV !== 'production') {
      if (origin.includes('localhost') || origin.includes('127.0.0.1')) {
        return callback(null, true);
      }
    }
    
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω—ñ –¥–æ–∑–≤–æ–ª—è—î–º–æ –≤—Å—ñ (–æ—Å–∫—ñ–ª—å–∫–∏ –Ω–∞ Render —Ü–µ –æ–¥–∏–Ω —Å–µ—Ä–≤—ñ—Å)
    callback(null, true);
  },
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization'],
};

// Middleware
app.use(cors(corsOptions));
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// Preflight –∑–∞–ø–∏—Ç–∏ –¥–ª—è –≤—Å—ñ—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤
app.options('*', cors(corsOptions));

// API Routes
app.get('/api/health', (req, res) => {
  const dbStatus = mongoose.connection.readyState === 1 ? 'connected' : 'disconnected';
  res.json({ 
    status: 'OK', 
    message: 'Server is running',
    database: dbStatus,
    timestamp: new Date().toISOString()
  });
});

app.use('/api/auth', authRoutes);
app.use('/api/content', contentRoutes);
app.use('/api/telegram', telegramRoutes);

// –ó–∞—Ö–∏—â–µ–Ω—ñ —Ä–æ—É—Ç–∏ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É
app.put('/api/content', authMiddleware, contentRoutes);

// Serve static files from frontend build (production)
if (process.env.NODE_ENV === 'production') {
  const frontendPath = path.join(__dirname, '../dist');
  
  console.log('Production mode: serving static files from', frontendPath);
  
  // –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ (–î–û express.static)
  app.use((req, res, next) => {
    if (req.path.startsWith('/assets/')) {
      console.log(`üì∏ Static file request: ${req.path}`);
    }
    next();
  });
  
  // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
  const staticOptions = {
    maxAge: '1d', // –ö–µ—à—É–≤–∞–Ω–Ω—è –Ω–∞ 1 –¥–µ–Ω—å
    etag: true,
    lastModified: true,
    setHeaders: (res, filePath) => {
      // –î–æ–¥–∞—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ —Ñ–∞–π–ª—ñ–≤
      if (filePath.endsWith('.jpg') || filePath.endsWith('.jpeg')) {
        res.setHeader('Content-Type', 'image/jpeg');
      } else if (filePath.endsWith('.png')) {
        res.setHeader('Content-Type', 'image/png');
      } else if (filePath.endsWith('.svg')) {
        res.setHeader('Content-Type', 'image/svg+xml');
      } else if (filePath.endsWith('.webp')) {
        res.setHeader('Content-Type', 'image/webp');
      }
      // –î–æ–∑–≤–æ–ª—è—î–º–æ –∫–µ—à—É–≤–∞–Ω–Ω—è
      res.setHeader('Cache-Control', 'public, max-age=86400'); // 24 –≥–æ–¥–∏–Ω–∏
    }
  };
  
  // –û–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
  app.use(express.static(frontendPath, staticOptions));
  
  // –í—Å—ñ —ñ–Ω—à—ñ –º–∞—Ä—à—Ä—É—Ç–∏ (–Ω–µ API —ñ –Ω–µ —Å—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏) –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –¥–æ React app
  app.get('*', (req, res) => {
    // –ù–µ –ø–æ–∫–∞–∑—É—î–º–æ –∑–≤–∏—á–∞–π–Ω—ñ —Ñ–∞–π–ª–∏
    if (!req.path.startsWith('/api') && !req.path.match(/\.(js|css|png|jpg|jpeg|svg|ico|webp)$/)) {
      console.log(`üåê SPA route: ${req.path}`);
    }
    res.sendFile(path.join(frontendPath, 'index.html'));
  });
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const server = app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—ñ ${PORT}`);
  console.log(`–†–µ–∂–∏–º: ${process.env.NODE_ENV || 'development'}`);
});

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–µ –±–ª–æ–∫—É—î–º–æ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞)
connectDB().catch(err => {
  console.error('–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î:', err);
});

// Graceful shutdown
const gracefulShutdown = (signal) => {
  console.log(`\n${signal} –æ—Ç—Ä–∏–º–∞–Ω–æ. –ó–∞–∫—Ä–∏—Ç—Ç—è —Å–µ—Ä–≤–µ—Ä–∞...`);
  server.close(() => {
    console.log('HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä–∏—Ç–æ');
    mongoose.connection.close(false, () => {
      console.log('MongoDB –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ');
      process.exit(0);
    });
  });

  // –ü—Ä–∏–º—É—Å–æ–≤–µ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø—ñ—Å–ª—è 10 —Å–µ–∫—É–Ω–¥
  setTimeout(() => {
    console.error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–∫—Ä–∏—Ç–∏ –∑\'—î–¥–Ω–∞–Ω–Ω—è –≤—á–∞—Å–Ω–æ, –ø—Ä–∏–º—É—Å–æ–≤–∏–π –≤–∏—Ö—ñ–¥');
    process.exit(1);
  }, 10000);
};

process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
process.on('SIGINT', () => gracefulShutdown('SIGINT'));

// –û–±—Ä–æ–±–∫–∞ –Ω–µ–ø–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫
process.on('unhandledRejection', (err) => {
  console.error('–ù–µ–ø–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–∞ Promise rejection:', err);
});

process.on('uncaughtException', (err) => {
  console.error('–ù–µ–ø–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–∏–π –≤–∏–Ω—è—Ç–æ–∫:', err);
  gracefulShutdown('UNCAUGHT_EXCEPTION');
});

