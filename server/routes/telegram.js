import express from 'express';

const router = express.Router();

// –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞—è–≤–∫—É –≤ Telegram
router.post('/send-application', async (req, res) => {
  try {
    const { name, phone, email } = req.body;
    
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    const chatId = process.env.TELEGRAM_CHAT_ID;
    
    if (!botToken || !chatId) {
      return res.status(503).json({ 
        success: false,
        message: 'Telegram –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.' 
      });
    }

    if (!name || !phone || !email) {
      return res.status(400).json({
        success: false,
        message: '–í—Å—ñ –ø–æ–ª—è –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ'
      });
    }

    const nameTrimmed = String(name).trim();
    const emailTrimmed = String(email).trim();
    const phoneTrimmed = String(phone).trim();

    const nameRegex = /^[A-Za-z–ê-–Ø–∞-—è–Å—ë–Ü—ñ–á—ó–Ñ—î“ê“ë' -]{2,}$/u;
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]{2,}$/;
    const uaPhoneRegex = /^\+380\d{9}$/;

    if (!nameRegex.test(nameTrimmed)) {
      return res.status(400).json({ success: false, message: "–ù–µ–≤–∞–ª—ñ–¥–Ω–µ —ñ–º'—è" });
    }
    if (!emailRegex.test(emailTrimmed)) {
      return res.status(400).json({ success: false, message: '–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π email' });
    }
    if (!uaPhoneRegex.test(phoneTrimmed)) {
      return res.status(400).json({ success: false, message: '–¢–µ–ª–µ—Ñ–æ–Ω —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX' });
    }

    const message = `üÜï –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞!\n\nüë§ –Ü–º'—è: ${nameTrimmed}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: ${phoneTrimmed}\nüìß Email: ${emailTrimmed}`;

    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: 'HTML',
      }),
    });

    if (response.ok) {
      res.json({ 
        success: true,
        message: '–ó–∞—è–≤–∫—É —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ' 
      });
    } else {
      const error = await response.json();
      console.error('Telegram API error:', error);
      res.status(500).json({ 
        success: false,
        message: '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.' 
      });
    }
  } catch (error) {
    console.error('Error sending telegram message:', error);
    res.status(500).json({ 
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
});

export default router;

